import express from "express";
import cors from "cors";
import cookieParser from "cookie-parser";
import jwt from "jsonwebtoken";
import bodyParser from 'body-parser';

const app = express();
const PORT = 5000;
const JWT_SECRET = "quocnhucheck"; // Secret key for JWT

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.use(cors({ origin: "http://localhost:3000", credentials: true }));
app.use(express.json());
app.use(cookieParser());

// Dummy user data with roles
const users = [
  { id: 1, username: "admin", password: "12345", role: "admin" },
  { id: 2, username: "editor", password: "12345", role: "editor" },
  { id: 3, username: "viewer", password: "12345", role: "viewer" },
];

// Role permissions map
const rolePermissions = {
  admin: ['/dashboard'],
  editor: ['/access-denied']
};

// Registration route (can be removed if you only need login)
app.post("/register", (req, res) => {
  try {
    const { username, password, role } = req.body;

    // Check if the username already exists
    const existingUser = users.find((u) => u.username === username);
    if (existingUser) {
      return res.status(400).json({ message: "Username already taken" });
    }

    // Add new user to the users array
    const newUser = {
      id: users.length + 1, // Simple ID generation for demo
      username,
      password,
      role,
    };
    users.push(newUser);
    console.log('new array', users)
    res.status(201).json({ message: "Registration successful", user: newUser });
  } catch (error) {
    res.status(500).json({ message: "Internal Server Error" });
  }
});

//Logout
app.post('/logout', (req, res) => {
  res.clearCookie('token'); 
  res.status(200).json({ message: "Cleared cookie!",success: true });
});
// Login route
app.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;
    console.log("check--<>",req.body)
    const user = users.find((u) => u.username === username && u.password === password); //

    if (!user) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, JWT_SECRET, { expiresIn: "1h" });

    // Send the token in a cookie, and also include role-based permissions
    res.cookie("token", token, { httpOnly: true,maxAge:3600 * 1000})
      .json({
        message: "Logged in",
        role: user.role,
        permissions: rolePermissions[user.role], // Attach role-specific permissions
        user: user.username,
        isAuthenticated: true
      });
  } catch (error) {
    res.status(500).json({ message: "Internal Server Error" });
  }
});

// Middleware to verify JWT token and check role-based access
const authenticateToken = (req, res, next) => {
  try {
    const token = req.cookies.token;
    console.log("Check cookie backend",token)
    if (!token) return res.status(403).json({ message: "Access Denied" });

    jwt.verify(token, JWT_SECRET, (err, user) => {
      if (err) return res.status(403).json({ message: "Invalid token" });
      req.user = user;

      // Check if the user has access to the requested path based on their role
      if (!rolePermissions[user.role].includes(req.path)) {
        return res.status(403).json({ message: "Access Denied: Insufficient permissions" });
      }

      next();
    });
  } catch (error) {
    res.status(500).json({ message: "Internal Server Error" });
  }
};

// Protected dashboard route
app.get("/dashboard", authenticateToken, (req, res) => {
  try {
    const { username, role } = req.user;

    // Retrieve permissions based on the user's role
    const permissions = rolePermissions[role] || [];

    res.status(200).json({
      message: `Welcome to the dashboard, ${username}`,
      user: {
        username,
        role,
        permissions,
      },
    });
  } catch (error) {
    res.status(500).json({ message: "Internal Server Error" });
  }
});

//Verify validation to prevent kicked out  
app.get('/verify', (req, res) => {
  const token = req.cookies.token;

  if (!token) return res.status(401).json({ message: 'Unauthorized', isAuthenticated: false });

  jwt.verify(token, JWT_SECRET, (err, decoded) => {
    if (err) return res.status(403).json({ message: 'Token is invalid or expired' });

    const { username, role } = decoded;
    const permissions = rolePermissions[role] || [];

    res.json({
      isAuthenticated: true,
      user: {
        username,
        role,
        permissions,
      },
    });
  });
});


app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
